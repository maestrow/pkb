#!/usr/bin/env bash

set -o errexit
set -o pipefail
# set -o xtrace

CONTAINER=${CONTAINER:-"pkb-db"}
DB_NAME=${DB_NAME:-"pkb"}

# -----------------------------------------------------------------------------
# Helper functions start with _ and aren't listed in this script's help menu.
# -----------------------------------------------------------------------------




# -----------------------------------------------------------------------------
# Tasks
# -----------------------------------------------------------------------------

function help {
  # : "Auto-generate list of tasks, including documentation in the form of these noop statements"
  # : "They can span multiple lines if needed"
  printf "%s <task> [args]\n\nTasks:\n" "${0}"
  compgen -A function | grep -v "^_" | while read -r name ; do
    task_desc=$(type "$name" | sed -nEe 's/^[[:space:]]*: ?"(.*)";/\1/p' | tr '\n' ' ')
    task_desc=$(printf "%s\n" "$task_desc" | fold -sw 80 | awk 'NR>1 {$0 = sprintf("%26s%s", "", $0)} 1') # hanging paragraph
    printf "     %-20s %s\n" "$name" "$task_desc"
  done
  printf "\nFor extended help refer to ./Taskfile\n"
}

function exec {
  : "Execute a command in the PostgreSQL container."
  docker exec $CONTAINER "${@}"
}

function exec_ti {
  : "Execute a command in the PostgreSQL container with a TTY."
  docker exec -ti $CONTAINER "${@}"
}

function exec_psql {
  : "Execute a psql command for pkb database."
  docker exec $CONTAINER psql -d $DB_NAME -U user "${@}"
}

function psql {
  : "Run psql"
  exec_ti psql -d $DB_NAME -U user "${@}"
}

function recreate_db {
  : "Recreate the PostgreSQL database."
  # ToDo: -U and pgpass file.
  exec psql -d postgres -U user -c "DROP DATABASE $DB_NAME;"
  exec psql -d postgres -U user -c "CREATE DATABASE $DB_NAME;"
}

function attach {
  : "Attach to the Docker container running PostgreSQL."
  exec_ti bash
}

function dump_drop {
  : "Dump DROP commands for all objects in the database into a sql/drop.sql file."
  file="drop.sql"
  echo "-- This file is automatically generated. See Taskfile commands." > "sql/$file"
  exec pg_dump -U user --schema-only --clean $DB_NAME | grep DROP >> ./sql/$file
}

function sql {
  : "Run a SQL using psql. Test: run sql 'SELECT now();'"
  # ToDo: Why we need -U user here? Why it is not enough to use the pgpass file?
  exec_psql -c "${@}"
}

function script {
  : "Run a SQL script using psql. Test: run script sql/ddl_create.sql"
  name=$1
  exec_psql -f "/scripts/$name.sql"
}

TIMEFORMAT="Task completed in %3lR"
time "${@:-help}"
